
# Remove Docker Packages

- name: Remove packages
  become: true
  block:
    - name: Remove Docker Packages
      package:
        name: "{{ remove_packages }}"
        state: absent
      when: packages is defined


# Install Install Docker Repos

- name: Check that the docker.asc exists
  stat:
    path: /etc/apt/keyrings/docker.asc
  register: docker_keyring

- name: Install the Docker package repository signing key
  become:
    yes
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/debian/gpg
    keyring: /etc/apt/keyrings/docker.asc
  when: not docker_keyring.stat.exists

- name: Check that the docker.list exists
  stat:
    path: /etc/apt/sources.list.d/docker.list
  register: docker_list

- name: Add Docker repository
  become:
    yes
  ansible.builtin.apt_repository:
    filename: docker.list
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian bookworm stable\n"
    update_cache: yes
  when: not docker_list.stat.exists

- name: Update apt package index (Docker repository)
  become:
    yes
  apt:
    update_cache: yes
  when: not terraform_bin.stat.exists

- name: Install Docker Packages
  become: true
  block:
    - name: Install from stable
      package:
        name: "{{ install_packages }}"
        state: latest
      when: packages is defined

- name: Ensure group "docker" exists with correct gid
  become: true
  ansible.builtin.group:
    name: docker
    state: present
    gid: 1750

- name: Add the user with a specific uid and a primary group of 'docker'
  become: true
  ansible.builtin.user:
    name: "{{ lookup('env', 'USER') }}"
    group: docker

- name: Start service docker, if not started
  become: true
  ansible.builtin.service:
    name: docker
    state: started
